# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 


#WHAT ARE THE TOP 10 DANCE TRACKS 
SELECT track_name AS [Top 10 Dance Tracks], artist_name FROM BIT_DB.Spotifydata
ORDER BY ROUND(danceability) desc
LIMIT 10; 

#WHO ARE THE TOP 5 Most Popular Artists
SELECT artist_name,AVG(popularity)
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY popularity desc
LIMIT 5;

#Label artists Likeability
SELECT artist_name,
CASE WHEN popularity >= 90 THEN 'Extremely_popular'
WHEN popularity >=80 THEN 'Popular'
WHEN popularity>=70 THEN 'Well Liked'
ELSE 'Unpopular' END AS Likeability
FROM BIT_DB.Spotifydata
GROUP BY artist_name;

#WHICH SONG HAS THE MOST ACOUSTICS AND USES A SONG MODE?
SELECT artist_name, track_name
FROM BIT_DB.Spotifydata
WHERE song_mode =1
ORDER BY acousticness desc
LIMIT 1;

#SHOW ANY ARTISTS W/ 2 OR MORE SONGS WITH AT LEAST 70% ENERGY and DANCEABILITY
SELECT artist_name, COUNT(artist_name) AS [# of Dance Songs]
FROM BIT_DB.Spotifydata
GROUP BY artist_name
HAVING COUNT(artist_name)>=2
AND ROUND(energy*100)>=70
AND ROUND(danceability *100) >= 70
;

#WHICH ARTIST HAS THE THE SHORTEST SONG 
SELECT artist_name, track_name,ROUND(duration_ms/60000.,2) AS Song_Length_Mins
FROM BIT_DB.Spotifydata
GROUP BY artist_name
LIMIT 1;

#WHICH SONGS FEATURE OTHER ARTISTS
SELECT track_name, artist_name
FROM BIT_DB.Spotifydata
WHERE track_name LIKE '%feat%'
;


#SORT THE TRACKS BY BPM AND WHETHER THEY ARE FAST, SLOW
SELECT track_name, ROUND(tempo) AS BPM, CASE WHEN tempo >=168 THEN 'Very Fast'
WHEN tempo >= 120 THEN 'Fast'
WHEN tempo >=108 THEN 'Moderately fast'
WHEN tempo >=76 THEN 'Moderately Slow'
ELSE 'Slow' END AS Tempo
FROM BIT_DB.Spotifydata
ORDER BY BPM desc;
